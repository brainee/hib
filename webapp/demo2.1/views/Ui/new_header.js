define(function(){return"﻿﻿\r\n<script type=\"text/lizard-config\">\r\n  {\r\n  url_schema: '/ui/new_header',\r\n  models: {\r\n  apis: [],\r\n  filter: function(datas) {\r\n  return {\r\n\r\n  };\r\n  }\r\n  },\r\n  view:{\r\n    viewport: Lizard.T(\"viewportTmpl\")\r\n  },\r\n  viewName: 'new_header',\r\n  controller: 'webresource/controllers/ui/new_header.js'\r\n  }\r\n</script>\r\n\r\n<script id=\"viewportTmpl\" type=\"text/lizard-template\">\r\n  \r\n\r\n<pre>\r\n<code>\r\n/*\r\n新接口如下，推荐接口调用方法为：\r\nview: true, //设置回调函数所处作用域\r\n{\r\nback: {}, //返回处设置参数\r\ncenter: {},  //标题处设置参数\r\nright: [{}, {}] //右边按钮集合，这里会按序排列\r\n}\r\n\r\nheader组件底层结构，left、center、right皆为数组，可保护多个标题对象，单个标题对象一般是这样的：\r\n{\r\n  tagname: '', //唯一标识，必须\r\n  callback: function() {}, //如果设置了变会有相关回调，如果设置了view回调会处于其作用域\r\n  value: '', //如果不设置该属性，会生成icon图标类点击，设置了会生成文字按钮\r\n  itemFn: function() {}, //要求返回一个字符串，不设置会根据规则生成按钮dom，设置了会根据itemFn生成\r\n}\r\n\r\nvalue为空时生成dom为：\r\n&lt;span class=\"cm-header-icon js_tagname\"&gt;\r\n  &lt;i class=\"icon-tagname\"&gt;&lt;/i&gt;\r\n&lt;/span&gt;\r\n\r\nvalue有值的会生成如下dom\r\n&lt;span class=\"cm-header-btn fr  js_tagname\"&gt;登录&lt;/span&gt;\r\n\r\n其中js_为javascript调用要用到的钩子，所以自己itemFn生成的dom也要满足这样规则\r\n\r\n\r\n*/\r\n  this.header.set({\r\n  view: this,\r\n  back:\r\n  {\r\n    'tagname': 'back', callback: function () {\r\n      console.log('back')\r\n      Lizard.goBack();\r\n    }\r\n  },\r\n  right: [\r\n    //注意***这里的classname会同步到对应标签上\r\n    { 'tagname': 'test', value: '定义class',  classname: 'custom_class',},\r\n    \r\n    {\r\n      'tagname': 'custom', 'value': '定制化',\r\n      itemFn: function () {\r\n        return '&lt;span class=\"cm-header-btn fr js_custom\"&gt;定制化&lt;/span&gt;';\r\n      },\r\n      callback: function () {\r\n        console.log('定制化');\r\n      }\r\n    }\r\n  ],\r\n  //这里写title或者center都是支持的\r\n  center: {\r\n    'tagname': 'title', 'value': ['精品特价', '11月24日 周一出发']\r\n  }\r\n});\r\n\r\n</code>\r\n\r\n</pre>\r\n</script>"});