define(function(){return"﻿﻿\r\n<script type=\"text/lizard-config\">\r\n{\r\n  url_schema: '/ui/calendar',\r\n  viewName: 'ui_calendar',\r\n  models: {\r\n    apis: [],\r\n    filter: function(datas) {\r\n      return {\r\n\r\n      };\r\n    }\r\n  },\r\n  view:{\r\n    viewport: Lizard.T(\"viewportTmpl\")\r\n  },\r\n  controller: 'webresource/controllers/ui/calendar.js'\r\n}\r\n</script>\r\n\r\n<script id=\"viewportTmpl\" type=\"text/lizard-template\">\r\n  <style>\r\n    .selected-departdate {\r\n      background: #06a2d0;\r\n    }\r\n  </style>\r\n  <div class=\"cui-citys-bd\">\r\n  </div>\r\n\r\n\r\n\r\n\r\n  <pre>\r\n  <code>\r\n/*\r\n日历的基本参数说明\r\n日历组件现在比较灵活，基本参数如下\r\ndateObj Date 为必须传递的，日历会以这个对象所在月开始向下\r\nsolarHoliday 为阳历节日，数据结构如下： ：'0101': '元旦',\r\nlunarHoliday 为阴历节日，数据结构如下： '20150218': '除夕',\r\nspecialDates 与上面一致，为特殊日期，便于后期做扩展\r\ndatamodel数据模型是核心数据点其结构如下：\r\nthis.datamodel = {\r\n  //dayItemFn执行时所属作用域，用户不必关注\r\n  scope: this,\r\n  //周末的显示方式，可设置\r\n  weekDayArr: ['日', '一', '二', '三', '四', '五', '六'],\r\n  //要显示几个月，可设置\r\n  displayMonthNum: 5,\r\n  //当前日期，用户设置外层dateObj即可，不必特别设置该参数\r\n  curTime: (new Date(this.dateObj.getFullYear(), this.dateObj.getMonth(), this.dateObj.getDate())).getTime(),\r\n  //分割月之间的显示\r\n  MonthClapFn: function (year, month) {\r\n    month = month + 1;\r\n    return year + '年' + (month) + '月';\r\n  },\r\n  //具体显示项目定制化\r\n  dayItemFn: function (year, month, day, dateObj, difftime) {\r\n    return '日期项目'\r\n  }\r\n};\r\ndayItemAction: function(dayObj, year, month, day, dateObj, difftime){} \r\n函数回调，如果dayItemFn不满足的话，这里继续定制化，\r\ndayObj为dayItem处理过的数据，会知道今天有什么特殊含义，是不是节日什么的\r\ndateObj 为真实日期对象\r\ndifftime为当前日期距离“今天”的毫秒数\r\nonItemClick: function(date, el, e) {}，为点击每个日期项目的回调\r\n*/\r\n</code>\r\n</pre>\r\n\r\n  <pre>\r\n<code>\r\n/*\r\n框架2.1由于Hybrid头与H5头经常出BUG的原因，去掉了日历具有弹出层的特性，要唤出弹出需要调用框架提供接口：\r\nshowHisCtnrView: function(onShow, onHide)\r\n  onShow为显示后要执行的回调，onHide是隐藏后要执行的回调\r\n*/\r\n</code>\r\n</pre>\r\n\r\n  <ul class=\"line-list\">\r\n    <li class=\"line-item js_demo03\">弹出日历</li>\r\n  </ul>\r\n  <br />\r\n  <span class=\"btn-secondary js_demo03_value\">当前日期选择</span>\r\n\r\n\r\n\r\n  <pre><code>\r\n/*\r\n这是最简单的demo，点击每个日期项目具有一个回调，这里有一个新的用法，便是动态操作其中一项日期\r\n*/\r\nif (!this.calendar01) {\r\n  this.calendar01 = new UICalendar({\r\n    datamodel: {\r\n      displayMonthNum: 3\r\n    },\r\n    wrapper: this.$el.find('.js_demo01_wrapper'),\r\n    onItemClick: function (date, el, e) {\r\n    }\r\n  });\r\n}\r\nthis.calendar01.show();\r\n\r\ndemo01_action: function () {\r\n  if (!this.calendar01) return;\r\n  this.calendar01.handleDay(this.$('.js_demo01_day').val(), function (el) {\r\n    this.$('li').removeClass('selected-departdate');\r\n    el.addClass('selected-departdate');\r\n  });\r\n},\r\n</code></pre>\r\n\r\n  <ul class=\"line-list\">\r\n    <li class=\"line-item \"><input type=\"text\" class=\"js_demo01_day\" placeholder=\"输入日期如：2014-2-8（2014年3月8日）\" /></li>\r\n    <li class=\"line-item js_demo01_btn\">点击定位最低价</li>\r\n  </ul>\r\n  <br />\r\n\r\n  <div class=\"js_demo01_wrapper\"></div>\r\n\r\n  <pre><code>\r\n/*\r\n这里模拟机酒的日历价格实现，机酒的业务逻辑是先显示两个月的数据，再动态加载2个月的数据，模拟其请求太过复杂，直接将其model返回数据取回\r\n*/\r\ndemo02: function () {\r\n  var data = {/*数据源*/};\r\n  //获取所有的价格\r\n  this.calendr_price02 = data.DailyPrices;\r\n  this.loadCalendar02(2);\r\n  setTimeout($.proxy(function () {\r\n    //这里有个缺陷，不能再次传入数据，再次传入数据的话需要对源数据做处理\r\n    //所以这里搞一个小技巧，将数据引用做传递\r\n    //注意这里的数据源引用，这个很关键\r\n    this.calendr_price02 = {/*数据源*/}.DailyPrices;\r\n    //加两个月显示\r\n    this.addCalendar02(2);\r\n    this.$('.js_demo02_loading').hide();\r\n  }, this), 5000);\r\n},\r\naddCalendar02: function (displayMonth) {\r\n  if (!this.calendar02) return;\r\n  this.calendar02.addDisplayMonth(displayMonth);\r\n},\r\nloadCalendar02: function (displayMonth) {\r\n  var scope = this;\r\n  if (!this.calendar02) {\r\n    this.calendar02 = new UICalendar({\r\n      datamodel: {\r\n        displayMonthNum: displayMonth\r\n      },\r\n      wrapper: this.$el.find('.js_demo02_wrapper'),\r\n      //定制化每一个日期项目的显示\r\n      dayItemAction: function (dayObj, year, month, day, dateObj, difftime) {\r\n        //这里与价格日历做一个映射即可\r\n        var _time = dateObj.getTime();\r\n        //var _mappingTime = '/Date(' + _time + '+0800)/';\r\n        //找出映射项目\r\n        var _dayPrice = _.find(scope.calendr_price02, function (item) {\r\n          return item['Date'].indexOf(_time) != -1;\r\n        });\r\n        if (_dayPrice) {\r\n          dayObj.dayprice = _dayPrice.MinPrice;\r\n        }\r\n        var dateStr = '';\r\n        //如果有阳历节日，则优先\r\n        dateStr = dayObj.lunarHoliday || dayObj.lunarHoliday || dayObj.day1 || dayObj.day;\r\n        if (dayObj.dayprice) {\r\n          if (dayObj.dayprice.Current > 0) {\r\n            dateStr += 'i￥' + dayObj.dayprice.Current + '/i';\r\n          } else if (dayObj.dayprice.Current == 0) {\r\n            dateStr += 'i实时计价/i';\r\n          }\r\n        }\r\n        return 'em' + dateStr + '/em';\r\n      },\r\n      onItemClick: function (date, el, e) {\r\n      }\r\n    });\r\n  }\r\n  this.calendar02.show();\r\n},\r\n</code></pre>\r\n  <div>\r\n    <div class=\"js_demo02_wrapper\"></div>\r\n    <div class=\"js_demo02_loading\" style=\"height: 50px; text-align: center; background: #DAD7D7; line-height: 50px; height: 50px; \">\r\n      <span class=\"icon-loading\"><i class=\"icon-loading-circle\"></i></span>\r\n    </div>\r\n  </div>\r\n\r\n\r\n</script>"});