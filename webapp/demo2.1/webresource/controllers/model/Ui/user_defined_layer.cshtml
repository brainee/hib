@{
  ViewBag.Title = "Ui index";
}
<script type="text/lizard-config">
{
  url_schema: '/ui',
  viewName: 'ui_user_defined_layer',
  models: {
    apis: [],
    filter: function(datas) {
      return {

      };
    }
  },
  view:{
    viewport: Lizard.T("viewportTmpl")
  },
  controller: '/webapp/demo2.1/webresource/controllers/ui/user_defined_layer.js'
}
</script>

<script id="viewportTmpl" type="text/lizard-template">
  <style type="text/css">
    .hotel-p-s-filter {
      position: fixed;
      z-index: 300;
      bottom: 0;
      width: 100%;
      padding: 10px;
      box-sizing: border-box;
      background: #efefef;
    }

      .hotel-p-s-filter dt {
        font-size: 14px;
        padding-bottom: 5px;
        clear: left;
      }

      .hotel-p-s-filter dd {
        float: left;
        background: #fff;
        width: 25%;
        padding: 10px 0;
        margin-bottom: 10px;
        text-align: center;
        margin-left: -2px;
        font-size: 11px;
        white-space: nowrap;
        letter-spacing: -1px;
      }

        .hotel-p-s-filter dd.current {
          background: #099fde;
          color: #fff;
        }

      .hotel-p-s-filter dt:nth-of-type(2) ~ dd {
        width: 33.33333%;
      }

      .hotel-p-s-filter .g_btn_s {
        clear: left;
      }

      .hotel-p-s-filter .g_btn_s {
        clear: left;
      }

    .g_btn_s {
      color: #FFF;
      font-size: 18px;
      width: 100%;
      height: 44px;
      line-height: 44px;
      display: block;
      -webkit-border-radius: 3px;
      -moz-border-radius: 3px;
      border-radius: 3px;
      margin: 0 auto;
      text-align: center;
      background-color: #ff9a14;
      -webkit-tap-highlight-color: #ff8c00;
    }
  </style>
 <div class="cui-citys-bd">
 </div>
<pre><code>
/*
所有弹出层组件的基类为UILayer，该类组件具有以下特性：
① 为定位元素
② 具有mask蒙版特性（可有可无）
③ 具有居中特性（如果非居中需要定制reposition函数，比如气泡组件，底部弹出组件）
④ 具有动画特性，这个根据组件不同，有所不同

以下为一些关键属性说明：
//为组件蒙版，所以继承至UILayer的组件都会有
this.mask = new UIMask();
//是否需要显示mask蒙版
this.needMask = true;

//需要点击蒙版删除
this.maskToHide = true;
//需要居中定位
this.needReposition = true;
//是否具有后退关闭弹出层需求（该属性不建议使用，将要废弃）
this.hasPushState = (history && history.pushState);
this.hasPushState = false;

//是否具有动画
this.needAnimat = true;
//如果具有动画，显示时的class以及隐藏时候的class
this.animateInClass = 'cm-up-in';
this.animateOutClass = 'cm-up-out';

//框架提供动画不支持时，自定义动画回调，同样需要设置needAnimate为true
this.animateShowAction = null;
this.animateHideAction = null;
*/  
</code></pre>

  <div class="form-item">
    <label class="field-label">标题</label>
    <input type="text" class="field-text demo01_title" placeholder="请输入标题" value="标题">
  </div>
  <div class="form-item">
    <label class="field-label">内容</label>
    <input type="text" class="field-text demo01_content" placeholder="请输入内容" value="内容">
  </div>
  <span class=" js_demo01 btn-primary full-width">简单自定义弹出层</span>
<pre>
<code>
//这里首先得形成一个类
var SimpleLayer = _.inherit(UILayer, {
  propertys: function ($super) {
    $super();
    this.datamodel = {
      title: '0',
      content: '1'
    };
    //每个组件都需要一个template模板字符串
    this.template = '&lt;div class="self-layer" style="border: 1px solid gray; background: white; color: black ; "&gt;&lt;div class="self-title"&gt;&lt;%=title%&gt;&lt;/div&gt;&lt;div class="self-content"&gt;&lt;%=content%&gt;&lt;/div&gt;&lt;/div&gt;';
  },
  setDatamodel: function (title, content) {
    this.datamodel = {
      title: title,
      content: content
    };
    this.refresh();
  },
  initialize: function ($super, opts) {
    $super(opts);
  }
});

//然后这里就可以调用了
if (!this.layer01) {
  this.layer01 = new SimpleLayer({
    datamodel: {
      title: this.$('.demo01_title').val(),
      content: this.$('.demo01_content').val()
    }
  });
} else {
  this.layer01.setDatamodel(this.$('.demo01_title').val(), this.$('.demo01_content').val());
}
this.layer01.show();

//在onhide的时候需要资源释放
onHide: function () {
  if (this.layer01) this.layer01.hide();
}

</code>
</pre>

  <span class=" js_demo02 btn-primary full-width">复杂的应用，底部弹出，功能复杂</span>

  <pre><code>
    //这里只做简单实现，实际场景会复杂一些，这里有一部分css，我直接拷贝到模板里了
var PriceLayer = _.inherit(UILayer, {
  propertys: function ($super) {
    $super();
    //不需要包裹层
    this.needRootWrapper = false;
    this.needMask = true;
    //不需要定位
    this.needReposition = false;
    //动画class定制化
    this.animateInClass = 'cm-down-in';
    this.animateOutClass = 'cm-down-out';
    //每个组件都需要一个template模板字符串
    this.template = '&lt;div class="hotel-p-s-filter js_price_star_filter" style="z-index:9999"&gt;&lt;dl&gt;&lt;dt&gt;价格(单选)&lt;/dt&gt;&lt;dd class="js_price_h js_price_all current"&gt;不限&lt;/dd&gt;&lt;dd class="js_price_h" data-price="0,150"&gt;￥150元以下&lt;/dd&gt;&lt;dd class="js_price_h" data-price="150,300"&gt;￥150-￥300&lt;/dd&gt;&lt;dd class="js_price_h" data-price="301,450"&gt;￥301-￥450&lt;/dd&gt;&lt;dd class="js_price_h" data-price="451,600"&gt;￥451-￥600&lt;/dd&gt;&lt;dd class="js_price_h" data-price="601,1000"&gt;￥601-￥1000&lt;/dd&gt;&lt;dd class="js_price_h" data-price="1000"&gt;￥1000以上&lt;/dd&gt;&lt;dt&gt;星级(复选)&lt;/dt&gt;&lt;dd class="js_star_h js_star_all current"&gt;不限&lt;/dd&gt;&lt;dd class="js_star_h" data-star="liansuo" data-text="快捷连锁"&gt;快捷连锁&lt;/dd&gt;&lt;dd class="js_star_h" data-star="0|1|2" data-text="二星级及以下/经济"&gt;二星级及以下/经济&lt;/dd&gt;&lt;dd class="js_star_h" data-star="3" data-text="三星级/舒适"&gt;三星级/舒适&lt;/dd&gt;&lt;dd class="js_star_h" data-star="4" data-text="四星级/高档"&gt;四星级/高档&lt;/dd&gt;&lt;dd class="js_star_h" data-star="5" data-text="五星级/豪华"&gt;五星级/豪华&lt;/dd&gt;&lt;div class="mt10"&gt;&lt;button class="g_btn_s js_price_star_filter_ok"&gt;确定&lt;/button&gt;&lt;/div&gt;&lt;/dl&gt;&lt;/div&gt;';
    //事件定义
    this.addEvents({
      'click dd': 'priceItemAction',
      'click .js_price_star_filter_ok': 'priceOkAction'
    });
  },
  priceItemAction: function (e) {
    var el = $(e.currentTarget);
    if (el.hasClass('js_price_h')) {
      this.$('dd.js_price_h').removeClass('current');
    } else {
      this.$('dd.js_star_h').removeClass('current');
    }
    el.addClass('current');
  },
  priceOkAction: function () {
    this.hide();
  },
  addEvent: function ($super) {
    $super();
    this.on('onCreate', function () {
      this.$el.removeClass('cui-layer');
    });
  },
  initialize: function ($super, opts) {
    $super(opts);
  }
});    

//调用的时候
if (!this.layer02) {
  this.layer02 = new PriceLayer({});
} 
this.layer02.show();

//onHide的时候记得资源销毁
onHide: function () {
  if (this.layer01) this.layer01.hide();
  if (this.layer02) this.layer02.hide();
}   
    </code></pre>

</script>