@{
  ViewBag.Title = "Ui index";
}
<script type="text/lizard-config">
{
  url_schema: '/ui',
  viewName: 'ui_calendar',
  models: {
    apis: [],
    filter: function(datas) {
      return {

      };
    }
  },
  view:{
    viewport: Lizard.T("viewportTmpl")
  },
  controller: '/webapp/demo2.1/webresource/controllers/ui/calendar.js'
}
</script>

<script id="viewportTmpl" type="text/lizard-template">
  <style>
    .selected-departdate {
      background: #06a2d0;
    }

  </style>
  <div class="cui-citys-bd">
  </div>
  <ul class="line-list">
    <li class="line-item js_demo03">弹出日历</li>
  </ul>
  <span class="btn-secondary js_demo03_value">当前日期选择</span>

<pre>
<code>
/*
框架2.1由于Hybrid头与H5头经常出BUG的原因，去掉了日历具有弹出层的特性，要唤出弹出需要调用框架提供接口：
showHisCtnrView: function(onShow, onHide)
  onShow为显示后要执行的回调，onHide是隐藏后要执行的回调
*/
</code>
</pre>



  <pre>
    <code>
/*
日历的基本参数说明
日历组件现在比较灵活，基本参数如下
dateObj Date 为必须传递的，日历会以这个对象所在月开始向下
solarHoliday 为阳历节日，数据结构如下： ：'0101': '元旦',
lunarHoliday 为阴历节日，数据结构如下： '20150218': '除夕',
specialDates 与上面一致，为特殊日期，便于后期做扩展
datamodel数据模型是核心数据点其结构如下：
this.datamodel = {
  //dayItemFn执行时所属作用域，用户不必关注
  scope: this,
  //周末的显示方式，可设置
  weekDayArr: ['日', '一', '二', '三', '四', '五', '六'],
  //要显示几个月，可设置
  displayMonthNum: 5,
  //当前日期，用户设置外层dateObj即可，不必特别设置该参数
  curTime: (new Date(this.dateObj.getFullYear(), this.dateObj.getMonth(), this.dateObj.getDate())).getTime(),
  //分割月之间的显示
  MonthClapFn: function (year, month) {
    month = month + 1;
    return year + '年' + (month) + '月';
  },
  //具体显示项目定制化
  dayItemFn: function (year, month, day, dateObj, difftime) {
    return '日期项目'
  }
};
dayItemAction: function(dayObj, year, month, day, dateObj, difftime){} 
函数回调，如果dayItemFn不满足的话，这里继续定制化，
dayObj为dayItem处理过的数据，会知道今天有什么特殊含义，是不是节日什么的
dateObj 为真实日期对象
difftime为当前日期距离“今天”的毫秒数
onItemClick: function(date, el, e) {}，为点击每个日期项目的回调

*/
</code>
</pre>
  <pre><code>
/*
这是最简单的demo，点击每个日期项目具有一个回调
*/
if (!this.calendar01) {
  this.calendar01 = new UICalendar({
    datamodel: {
      displayMonthNum: 3
    },
    wrapper: this.$el.find('.js_demo01_wrapper'),
    onItemClick: function (date, el, e) {
    }
  });
}
this.calendar01.show();
</code></pre>
  <div class="js_demo01_wrapper"></div>

  <pre><code>
/*
这里模拟机酒的日历价格实现，机酒的业务逻辑是先显示两个月的数据，再动态加载2个月的数据，模拟其请求太过复杂，直接将其model返回数据取回
*/
demo02: function () {
  var data = {/*数据源*/};
  //获取所有的价格
  this.calendr_price02 = data.DailyPrices;
  this.loadCalendar02(2);
  setTimeout($.proxy(function () {
    //这里有个缺陷，不能再次传入数据，再次传入数据的话需要对源数据做处理
    //所以这里搞一个小技巧，将数据引用做传递
    //注意这里的数据源引用，这个很关键
    this.calendr_price02 = {/*数据源*/}.DailyPrices;
    //加两个月显示
    this.addCalendar02(2);
    this.$('.js_demo02_loading').hide();
  }, this), 5000);
},
addCalendar02: function (displayMonth) {
  if (!this.calendar02) return;
  this.calendar02.addDisplayMonth(displayMonth);
},
loadCalendar02: function (displayMonth) {
  var scope = this;
  if (!this.calendar02) {
    this.calendar02 = new UICalendar({
      datamodel: {
        displayMonthNum: displayMonth
      },
      wrapper: this.$el.find('.js_demo02_wrapper'),
      //定制化每一个日期项目的显示
      dayItemAction: function (dayObj, year, month, day, dateObj, difftime) {
        //这里与价格日历做一个映射即可
        var _time = dateObj.getTime();
        //var _mappingTime = '/Date(' + _time + '+0800)/';
        //找出映射项目
        var _dayPrice = _.find(scope.calendr_price02, function (item) {
          return item['Date'].indexOf(_time) != -1;
        });
        if (_dayPrice) {
          dayObj.dayprice = _dayPrice.MinPrice;
        }
        var dateStr = '';
        //如果有阳历节日，则优先
        dateStr = dayObj.lunarHoliday || dayObj.lunarHoliday || dayObj.day1 || dayObj.day;
        if (dayObj.dayprice) {
          if (dayObj.dayprice.Current > 0) {
            dateStr += 'i￥' + dayObj.dayprice.Current + '/i';
          } else if (dayObj.dayprice.Current == 0) {
            dateStr += 'i实时计价/i';
          }
        }
        return 'em' + dateStr + '/em';
      },
      onItemClick: function (date, el, e) {
      }
    });
  }
  this.calendar02.show();
},
</code></pre>
  <div>
    <div class="js_demo02_wrapper"></div>
    <div class="js_demo02_loading" style="height: 50px; text-align: center; background: #DAD7D7; line-height: 50px; height: 50px; ">
        <span class="icon-loading"><i class="icon-loading-circle"></i></span>
    </div>
  </div>


</script>