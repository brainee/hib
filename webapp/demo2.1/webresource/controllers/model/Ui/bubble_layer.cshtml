@{
  ViewBag.Title = "Ui index";
}
<script type="text/lizard-config">
{
  url_schema: '/ui',
  viewName: 'ui_bubble_layer',
  models: {
    apis: [],
    filter: function(datas) {
      return {

      };
    }
  },
  view:{
    viewport: Lizard.T("viewportTmpl")
  },
  controller: '/webapp/demo2.1/webresource/controllers/ui/bubble_layer.js'
}
</script>

<script id="viewportTmpl" type="text/lizard-template">
 <div class="cui-citys-bd">
 </div>

  <ul class="line-list">
    <li class="line-item js_demo01">基本用法-同样onHide的时候要做资源清理</li>
  </ul>

  <pre>
<code>
if (!this.demo1) {
  this.dom01 = this.$('.js_demo01');
  var scope = this;
  var data = [
    { name: '价格/星级' },
    { name: '位置区域' },
    { name: '品牌' },
    { name: '测试' }
  ];
  var el = $(e.currentTarget);
  var index = parseInt(Math.random() * 4);
  var dir = (e.pageY > 200) ? 'down' : 'up';
  this.demo1 = new UIBubbleLayer({
    triggerEl: el,
    datamodel: {
      data: data,
      dir: dir,
      index: index
    },
    onClick: function (data, index, el) {
      console.log(arguments);
      this.setIndex(index);
      this.hide();
      scope.dom01.html(data.name);
    }
  });
}
this.demo1.show();
onHide: function () {
  if (!this.demo1) {
    this.demo1.hide();
  }
}
</code>
</pre>


  <span class="btn-primary js_demo02">简单定制化</span>
  <pre>
  <code>

if (!this.layer) {
  var scope = this;
  var data = [
    { name: '价格/星级' },
    { name: '评分', tips: '越高越好'  },
    { name: '价格', tips: '越低越好' },
    { name: '距离', tips: '测试换行 测试换行测试换行测试换行测试换行测试换行' }
  ];
  var el = $(e.currentTarget);
  var index = parseInt(Math.random() * 4);
  var dir = (e.pageY > 200) ? 'down' : 'up';
  this.layer = new UIBubbleLayer({
    triggerEl: el,
    datamodel: {
      //设置该函数的话，每一项目的结构便定制化了，这里要求返还一个字符串，这个里作用域指向组件本身
      //第一个参数为对应数据，第二个参数为索引
      itemFn: function(item, index) {
        var str = item.name;
        if (item.tips) str += '-<span style="color: red;">' + item.tips + '</span>';
        return str
      },
      data: data,
      dir: dir,
      index: index
    },
    //这里可以设置宽度，按照实际需求设置
    width: '200px',
    //这里定制化动画效果
    animateInClass: 'cm-up-in',
    animateOutClass: 'cm-up-out',
    //这里定制化三角形的位置，按实际需要设置
    triangleLeft: '20px',
    onClick: function (data, index, el) {
      console.log(arguments);
      this.setIndex(index);
      this.hide();
    }
  });
}
this.layer.show();

onHide: function () {
  if (this.demo1) {
    this.demo1.hide();
  }
  if (this.layer) {
    this.layer.hide();
  }
}
  </code>
  </pre>
</script>