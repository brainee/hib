@{
  ViewBag.Title = "Ui index";
}
<script type="text/lizard-config">
{
  url_schema: '/ui',
  viewName: 'ui_toast',
  models: {
    apis: [],
    filter: function(datas) {
      return {

      };
    }
  },
  view:{
    viewport: Lizard.T("viewportTmpl")
  },
  controller: '/webapp/demo2.1/webresource/controllers/ui/toast.js'
}
</script>

<script id="viewportTmpl" type="text/lizard-template">
 <div class="cui-citys-bd">
 </div>

<pre>
<code>
param template     {String}    自定义模板
param datamodel    {Object}    datamodel对象
param hideSec      {int}     	显示的时间(毫秒)
param TIMERRES     {Bool}      模板视图文本
param maskToHide   {Bool}      是否点击mask隐藏
param setDatamodel {Object}    动态设置属性、事件
</code>
</pre>

<ul class="line-list">
  <li class="line-item js_demo01">框架基本用法</li>
  <li class="line-item js_demo02">框架基本用法-不带蒙版</li>
  <li class="line-item js_demo03">框架基本用法-点击蒙版不关闭-3秒关闭</li>
</ul>
<pre>

<code>
demo01: function () {
  this.showToast('框架基本使用');
},
demo02: function () {
  this.showToast({
    datamodel: {
      content: '框架使用'
    },
    needMask: false
  });
},
demo03: function () {
  this.showToast({
    datamodel: {
      content: '带蒙版，点击蒙版不关闭，3秒关闭'
    },
    maskToHide: false,
    hideSec: 3000
  });
},
</code>
</pre>

  <ul class="line-list">
    <li class="line-item js_demo04">单独使用组件使用注意，show的时候判断是否实例化，onHide时候hide组件，不需要动画</li>
  </ul>
  <pre>
<code>
demo04: function () {
  if (!this.toast01) {
    this.toast01 = new UIToast({
      datamodel: {
        content: 'two second close'
      },
      needAnimat: false,
      hideSec: 2000
    });
  }
  this.toast01.show();
},
onHide: function () {
  if (this.toast01) {
    this.toast01.hide();
  }
}
</code>
</pre>
</script>